package CKYC.ICICI;

import java.awt.AWTException;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;

import javax.imageio.ImageIO;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.BasicConfigurator;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;

import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.UnexpectedAlertBehaviour;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.Reporter;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeSuite;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;

public class BaseClass {

	Logger log = LogManager.getLogger("BaseClass");
	public static java.util.Date date = new java.util.Date();
	public static Date resultTime = Calendar.getInstance().getTime();
	public static ExtentReports extent;
	public static ExtentTest test;

	public static WebDriver driver;
	public static Properties pr = new Properties();
	FileReader fr;

	public static Properties prd = new Properties();
	FileReader frd;

	public static JavascriptExecutor js;

	@BeforeSuite(groups = { "New dump Upload and Process", "Upload Response", "Pending Cust Report",
			"CKYC Id Generated Report", "Check Draft Cust", "Search and Download", "MultiSearch" })
	public void invokeBrowser() {
		log.info("Test Start --------------------------------->>");
		Reporter.log(resultTime + " - " + "Test Start");
		System.out.println(resultTime + " - " + "Test Start");

		ChromeOptions options = new ChromeOptions();
		options.addArguments("--remote-allow-origins=*");
		driver = new ChromeDriver(options);

		driver.manage().window().maximize();
		log.info("Browser Open");
		Reporter.log(resultTime + " - " + "Browser Open");
		System.out.println(resultTime + " - " + "Browser Open");
		// Properties for locators
		try {
			fr = new FileReader(System.getProperty("user.dir") + "\\src\\test\\java\\utilities\\config.properties");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			pr.load(fr);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// Properties for Input Values
		try {
			frd = new FileReader(System.getProperty("user.dir") + "\\src\\test\\java\\utilities\\data.properties");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			prd.load(frd);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
		js = (JavascriptExecutor) driver;
		//BasicConfigurator.configure();
		extent = new ExtentReports();

	}

	//@AfterSuite(groups = { "New dump Upload and Process", "Upload Response", "Pending Cust Report","CKYC Id Generated Report", "Check Draft Cust", "Search and Download","MultiSearch" })
	public void closure() {

		driver.close();
		log.info("Browser closed");
		Reporter.log(resultTime + " - " + "Browser closed");
		System.out.println(resultTime + " - " + "Browser closed");
		log.info("Test End --------------------------------->>" + '\n');
		Reporter.log(resultTime + " - " + "Test End");
		System.out.println(resultTime + " - " + "Test End");
	}

	//@AfterMethod
	public void takeScreenshot() throws IOException {
		String out = new SimpleDateFormat("yyyy-MM-dd hh-mm-ss'.png'").format(new Date());
		String nm = date.toString();
		TakesScreenshot screenshot = ((TakesScreenshot) driver);
		File src = screenshot.getScreenshotAs(OutputType.FILE);
		File dest = new File(System.getProperty("user.dir") + "\\screenshot\\" + "EndTest_ss" + out);
		FileUtils.copyFile(src, dest);
	}

	public static void ss() throws IOException, HeadlessException, AWTException {
		String out = new SimpleDateFormat("yyyy-MM-dd hh-mm-ss'.png'").format(new Date());
		BufferedImage image = new Robot()
				.createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
		ImageIO.write(image, "png", new File(System.getProperty("user.dir") + "\\screenshot\\" + out));
	}

}
